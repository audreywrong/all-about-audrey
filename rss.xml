<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[All About Audrey]]></title><description><![CDATA[I am a web developer, baker, dog mom, gym rat, hiker, traveler, gamer, music lover and all around nerd. Welcome to my musings!]]></description><link>https://github.com/wangonya/flexible-gatsby</link><generator>GatsbyJS</generator><lastBuildDate>Tue, 02 Mar 2021 17:13:24 GMT</lastBuildDate><item><title><![CDATA[Introduction to Node + Mocha + TypeScript]]></title><description><![CDATA[Node JS + Mocha + TypeScript Intro Recently I have been wanting to dip my toe into back-end topics and more in depth debugging and error…]]></description><link>https://github.com/wangonya/flexible-gatsby/node-mocha-ts/</link><guid isPermaLink="false">https://github.com/wangonya/flexible-gatsby/node-mocha-ts/</guid><pubDate>Mon, 01 Mar 2021 17:21:00 GMT</pubDate><content:encoded>&lt;h3&gt;Node JS + Mocha + TypeScript Intro&lt;/h3&gt;
&lt;p&gt;Recently I have been wanting to dip my toe into back-end topics and more in depth debugging and error prevention. This article will cover my introduction to Node, the Mocha JavaScript library and TypeScript!
I wrote this article for an audience assumed to be familiar with the topics already. If you would like a more specific and basic breakdown of what each of these are, sent me a tweet or message me on LinkedIn, and I will do my best to write those specific articles.&lt;/p&gt;
&lt;h3&gt;Node JS&lt;/h3&gt;
&lt;p&gt;Node JS is something I have been aware of since I started learning how to code but did not quite understand what is was or used for. Breaking it down into layman&apos;s terms helped to keep the topic simple and able to be built upon as I continue to learn more.&lt;/p&gt;
&lt;p&gt;&quot;NODE JS: CROSS-PLATFORM FOR SERVER-SIDE PROGRAMMING THAT ALLOWS USERS TO BUILD SCALABLE NETWORK APPLICATIONS QUICKLY&quot;&lt;/p&gt;
&lt;p&gt;I wrote a simple &quot;Hello World!&quot; program that logged the aforementioned phrase to the command line as my first go at writing a node program. It was easy, and it worked! Two things that do not often go together when learning a new programming topic. I also learned the importance of explicitly writing scripts in order to remove guesswork or human error when compiling and testing code.&lt;/p&gt;
&lt;h3&gt;Mocha&lt;/h3&gt;
&lt;p&gt;The next step was to install Mocha and learn how to write some simple tests. I ran an example test to play around with the syntax, make some changes of my own, and get a feel for how it worked. Additionally, I learned how to write node scripts with mocha commands. Great -- we are getting somewhere!&lt;/p&gt;
&lt;h3&gt;TypeScript&lt;/h3&gt;
&lt;p&gt;The final piece of this learning puzzle was to implement TypeScript into a simple project to see how Node, Mocha and TypeScript came together to prevent bugs in a project in a simple, clean way.
I wrote a TypeScript program that made a math equation factory for addition and subtraction. This program took in an equation type and two numbers and returned a value based upon whether the numbers were added or subtracted. Super simple and easy to test!&lt;/p&gt;
&lt;p&gt;In this sample program I was able to see how TypeScript was able to check not only primitive types with my number argument, but user-defined types as well with my &quot;equationType&quot; (add or subtract) argument.&lt;/p&gt;
&lt;p&gt;With all of these pieces in place and everything looking good (after some compiling troubleshooting, of course) I was able to run my first meta expectation (???) on a sample program of my own!&lt;/p&gt;
&lt;h3&gt;Takeaways&lt;/h3&gt;
&lt;p&gt;What was cool about starting my learning journey on these topics? 1. Errors are COOL and HELPFUL! Errors are your friend. You would not want your code to be full of bugs and not tell you, right? How else would you know what to fix? You would be staring at a screen not knowing where to start even if the errors being thrown are not the exact root of the issue all of the time. 2. More practice in debugging! This goes hand-in-hand with point one, but I am of the mindset that &quot;more is more&quot; with debugging and error handling. In a professional setting with projects being shipped and often a lot on the line, it is crucial to have not only great googling skills, but confidence in debugging. You can only obtain this from practice and not being afraid of red, squiggles, or messages &quot;yelling&quot; at you. 3. It was WAY EASIER THAN I EXPECTED. I have a tendency to get in my head about new topics. Learning to code has been instrumental of my learning how to get over this and being excited to crack a new topic. Learning Node, using Mocha and implementing TypeScript was no different. It was fun, straight forward and pretty easy. I am excited to write tests for larger projects and see this all in action even more!&lt;/p&gt;
&lt;h3&gt;What&apos;s Next?&lt;/h3&gt;
&lt;p&gt;I could write a book to answer this question, but I&apos;ll do my best to keep it simple!
First I would like to implement TSLint into this example project in order to play around with how it works and add further error handling to a program.
I would like to write tests in Jest with my React-built projects to have practice with some more complex applications than my simple equation builder.
Finally more complicated Node projects and introducing Express servers has to make the cut.&lt;/p&gt;
&lt;p&gt;I am motivated and excited to learn more about these above topics and see how they&apos;re used in practice!
What are you excited to learn next? What are you currently working on? I want to hear from you! Please feel free to share any resources you are finding valuable and helpful.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Learning GitHub!]]></title><description><![CDATA[WHAT is GitHub? Git…what? What is a 'GitHub'? How do I use it? cue blank stare
GitHub was a completely foreign concept to me when first…]]></description><link>https://github.com/wangonya/flexible-gatsby/learning-github/</link><guid isPermaLink="false">https://github.com/wangonya/flexible-gatsby/learning-github/</guid><pubDate>Mon, 08 Feb 2021 17:21:00 GMT</pubDate><content:encoded>&lt;h3&gt;WHAT is GitHub?&lt;/h3&gt;
&lt;p&gt;Git…what? What is a &apos;GitHub&apos;? How do I use it? &lt;em&gt;cue blank stare&lt;/em&gt;
GitHub was a completely foreign concept to me when first introduced. I had never heard the word &quot;repository&quot; before let alone branches, forking, or committing in the programming sense. I was intimidated to say the least and this blank stare was the first of many (more on that to come!). I learned GitHub as I was just starting to learn to code and had only began the basics of HTML.&lt;/p&gt;
&lt;p&gt;So, what is it? For those unfamiliar, GitHub is &apos;a provider of Internet hosting for software development and version control using Git. It offers the distributed version control and source code management functionality of Git, plus its own features (github.com)&apos;.&lt;/p&gt;
&lt;p&gt;Let&apos;s break this down some.
GitHub is a &quot;hub&quot; for software engineers to host and store code (in repositories)! It lets you work on projects from anywhere and with anyone. GitHub helps developers manage version control and collaboration. Two very important components of building clean and consistent applications. This is especially important in team environments whether it be an open source project being worked on or in the professional manner.&lt;/p&gt;
&lt;h3&gt;WHY GitHub?&lt;/h3&gt;
&lt;p&gt;Why did my mentor have me start on GitHub before even really learning how to code? He explained that it would be valuable to have public proof that I was coding for as long as possible. This stands out to potential employers while you&apos;re going through the job search process and shows that you&apos;re actively contributing to projects.
He then guided me through the set up process of my first repository. I learned that a repository was a storage location for software packages. I wrapped my head around that simple definition to start, took a deep breath, and knew that I could build from there.
It was slow going at first and, I&apos;ll admit, I was nervous. Once I received a little push from my mentor to dive into a project was when I really &quot;got my hands dirty&quot; and started to learn the ins and outs.&lt;/p&gt;
&lt;p&gt;Over time I have become so comfortable with GitHub that I excitedly check my activity to see all of the commits I&apos;ve pushed (nerd -- I know). There is something exciting about creating a new repository because, more often than not, it is the beginning of a new project! I learn more with each project I push to GitHub and the more opportunities I get to experiment with branches, push and pull requests, and contributing to open source projects which is just a fancy way of saying &quot;adding code to other peoples code and see if they want to keep it&quot;. I have learned more about the GitHub community and have utilized the job listings section as of late!&lt;/p&gt;
&lt;h3&gt;How to start with GitHub&lt;/h3&gt;
&lt;p&gt;If you&apos;re just starting out with Git and GitHub (more to come on Git in the future!) and are not sure where to start I can personally vouch for Codecademy! They are incredibly user friendly, have an active community, and I found their curriculum to be straight forward, clear, and concise.
The GitHub website has great information and resources to be able to use all that they have to offer. There are written and video tutorials to guide you through certain topics. Make use of documentation!
Utilize the vast amount of information you have at your fingertips with YouTube as well! There are a wealth of great Developers and videos to be found about certain topics. Any time I was unsure of how a certain aspect worked or if someone had already created a component I was interested in I was, more often than not, able to find it on YouTube!&lt;/p&gt;
&lt;p&gt;By pushing myself to make GitHub a part of my daily developer life I have learned that the more you use something, the more familiar it becomes. This is personally a constant theme I&apos;m finding as a coder that I&apos;m sure others resonate with!&lt;/p&gt;
&lt;p&gt;What else would you like to know about GitHub? If you&apos;re a developer, what&apos;s your experience been like? Let me know in the comments below! If you have a project you would like to share, please link it as well!&lt;/p&gt;</content:encoded></item></channel></rss>