{"version":3,"sources":["webpack:///./src/templates/blog-list.js","webpack:///./src/components/seo.js"],"names":["BlogIndex","render","data","this","props","siteTitle","site","siteMetadata","title","posts","allMarkdownRemark","edges","pageContext","currentPage","numPages","isFirst","isLast","prevPage","toString","nextPage","keywords","className","map","node","key","fields","slug","frontmatter","img","childImageSharp","fluid","to","style","backgroundImage","src","excerpt","date","timeToRead","role","rel","React","Component","pageQuery","SEO","description","lang","meta","useStaticQuery","metaDescription","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps"],"mappings":"qNAMMA,E,kGACJC,OAAA,WAAU,IACAC,EAASC,KAAKC,MAAdF,KACFG,EAAYH,EAAKI,KAAKC,aAAaC,MACnCC,EAAQP,EAAKQ,kBAAkBC,MAH9B,EAI2BR,KAAKC,MAAMQ,YAArCC,EAJD,EAICA,YAAaC,EAJd,EAIcA,SACfC,EAA0B,IAAhBF,EACVG,EAASH,IAAgBC,EACzBG,EAAWJ,EAAc,GAAM,EAAI,KAAOA,EAAc,GAAGK,WAC3DC,GAAYN,EAAc,GAAGK,WAEnC,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEV,MAAOH,EACPe,SAAU,CAAC,OAAD,iCAEZ,yBAAKC,UAAU,wBACZZ,EAAMa,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACZ,OACE,6BAASF,UAAU,OAAOG,IAAKD,EAAKE,OAAOC,MACxCH,EAAKI,YAAYC,KAChBL,EAAKI,YAAYC,IAAIC,iBACrBN,EAAKI,YAAYC,IAAIC,gBAAgBC,OACnC,kBAAC,OAAD,CACEC,GAAIR,EAAKE,OAAOC,KAChBL,UAAU,iBACVW,MAAO,CACLC,gBAAgB,OAAQV,EAAKI,YAAYC,IAAIC,gBAAgBC,MAAMI,IAApD,OAIvB,yBAAKb,UAAU,gBACb,wBAAIA,UAAU,cACZ,kBAAC,OAAD,CAAMU,GAAIR,EAAKE,OAAOC,MAAOH,EAAKI,YAAYnB,QAEhD,2BAAIe,EAAKY,SACT,0BAAMd,UAAU,aACbE,EAAKI,YAAYS,KADpB,QAGA,0BAAMf,UAAU,cACbE,EAAKc,WADR,sBASV,yBAAKhB,UAAU,aACb,yBAAKA,UAAU,aAAaiB,KAAK,cAC/B,6BACIvB,GACA,2BACE,kBAAC,OAAD,CAAMgB,GAAId,EAAUsB,IAAI,OAAOlB,UAAU,eAAzC,oBAKJ,2BACE,0BAAMA,UAAU,eAAhB,QACQR,EADR,OACyBC,KAGzBE,GACA,2BACE,kBAAC,OAAD,CAAMe,GAAIZ,EAAUoB,IAAI,OAAOlB,UAAU,eAAzC,qB,GAlEMmB,IAAMC,WA+EfzC,YAER,IAAM0C,EAAS,a,kCCvFtB,0DAYA,SAASC,EAAT,GAAkD,IAAnCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,KAAMtC,EAAS,EAATA,MAC9BF,EAASyC,yBAAe,YAAxBzC,KAcF0C,EAAkBJ,GAAetC,EAAKC,aAAaqC,YAEzD,OACE,kBAAC,IAAD,CACEK,eAAgB,CACdJ,QAEFrC,MAAOA,EACP0C,cAAa,QAAU5C,EAAKC,aAAaC,MACzCsC,KAAM,CACJ,CACEK,KAAK,cACLC,QAASJ,GAEX,CACEK,SAAS,WACTD,QAAS5C,GAEX,CACE6C,SAAS,iBACTD,QAASJ,GAEX,CACEK,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,QAAS9C,EAAKC,aAAa+C,QAE7B,CACEH,KAAK,gBACLC,QAAS5C,GAEX,CACE2C,KAAK,sBACLC,QAASJ,IAEXO,OAAOT,KAKfH,EAAIa,aAAe,CACjBX,KAAK,KACLC,KAAM,GACNF,YAAY,IAUCD","file":"component---src-templates-blog-list-js-d06dbb0a8651930e0efb.js","sourcesContent":["import React from 'react'\r\nimport { Link, graphql } from 'gatsby'\r\n\r\nimport DefaultLayout from '../components/layout'\r\nimport SEO from '../components/seo'\r\n\r\nclass BlogIndex extends React.Component {\r\n  render() {\r\n    const { data } = this.props\r\n    const siteTitle = data.site.siteMetadata.title\r\n    const posts = data.allMarkdownRemark.edges\r\n    const { currentPage, numPages } = this.props.pageContext\r\n    const isFirst = currentPage === 1\r\n    const isLast = currentPage === numPages\r\n    const prevPage = currentPage - 1 === 1 ? '/' : (currentPage - 1).toString()\r\n    const nextPage = (currentPage + 1).toString()\r\n\r\n    return (\r\n      <DefaultLayout>\r\n        <SEO\r\n          title={siteTitle}\r\n          keywords={[`blog`, `gatsby`, `javascript`, `react`]}\r\n        />\r\n        <div className=\"content-box clearfix\">\r\n          {posts.map(({ node }) => {\r\n            return (\r\n              <article className=\"post\" key={node.fields.slug}>\r\n                {node.frontmatter.img &&\r\n                  node.frontmatter.img.childImageSharp &&\r\n                  node.frontmatter.img.childImageSharp.fluid && (\r\n                    <Link\r\n                      to={node.fields.slug}\r\n                      className=\"post-thumbnail\"\r\n                      style={{\r\n                        backgroundImage: `url(${node.frontmatter.img.childImageSharp.fluid.src})`,\r\n                      }}\r\n                    />\r\n                  )}\r\n                <div className=\"post-content\">\r\n                  <h2 className=\"post-title\">\r\n                    <Link to={node.fields.slug}>{node.frontmatter.title}</Link>\r\n                  </h2>\r\n                  <p>{node.excerpt}</p>\r\n                  <span className=\"post-date\">\r\n                    {node.frontmatter.date}&nbsp;&nbsp;—&nbsp;\r\n                  </span>\r\n                  <span className=\"post-words\">\r\n                    {node.timeToRead} minute read\r\n                  </span>\r\n                </div>\r\n              </article>\r\n            )\r\n          })}\r\n        </div>\r\n\r\n        <div className=\"container\">\r\n          <nav className=\"pagination\" role=\"pagination\">\r\n            <ul>\r\n              {!isFirst && (\r\n                <p>\r\n                  <Link to={prevPage} rel=\"prev\" className=\"newer-posts\">\r\n                    ← Previous Page\r\n                  </Link>\r\n                </p>\r\n              )}\r\n              <p>\r\n                <span className=\"page-number\">\r\n                  Page {currentPage} of {numPages}\r\n                </span>\r\n              </p>\r\n              {!isLast && (\r\n                <p>\r\n                  <Link to={nextPage} rel=\"next\" className=\"older-posts\">\r\n                    Next Page →\r\n                  </Link>\r\n                </p>\r\n              )}\r\n            </ul>\r\n          </nav>\r\n        </div>\r\n      </DefaultLayout>\r\n    )\r\n  }\r\n}\r\n\r\nexport default BlogIndex\r\n\r\nexport const pageQuery = graphql`\r\n  query blogPageQuery($skip: Int!, $limit: Int!) {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n      }\r\n    }\r\n    allMarkdownRemark(\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n      limit: $limit\r\n      skip: $skip\r\n    ) {\r\n      edges {\r\n        node {\r\n          excerpt\r\n          fields {\r\n            slug\r\n          }\r\n          timeToRead\r\n          frontmatter {\r\n            date(formatString: \"YYYY, MMM DD\")\r\n            title\r\n            img {\r\n              childImageSharp {\r\n                fluid(maxWidth: 3720) {\r\n                  aspectRatio\r\n                  base64\r\n                  sizes\r\n                  src\r\n                  srcSet\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n","/**\r\n * SEO component that queries for data with\r\n *  Gatsby's useStaticQuery React hook\r\n *\r\n * See: https://www.gatsbyjs.org/docs/use-static-query/\r\n */\r\n\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Helmet from 'react-helmet'\r\nimport { useStaticQuery, graphql } from 'gatsby'\r\n\r\nfunction SEO({ description, lang, meta, title }) {\r\n  const { site } = useStaticQuery(\r\n    graphql`\r\n      query {\r\n        site {\r\n          siteMetadata {\r\n            title\r\n            description\r\n            author\r\n          }\r\n        }\r\n      }\r\n    `\r\n  )\r\n\r\n  const metaDescription = description || site.siteMetadata.description\r\n\r\n  return (\r\n    <Helmet\r\n      htmlAttributes={{\r\n        lang,\r\n      }}\r\n      title={title}\r\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\r\n      meta={[\r\n        {\r\n          name: `description`,\r\n          content: metaDescription,\r\n        },\r\n        {\r\n          property: `og:title`,\r\n          content: title,\r\n        },\r\n        {\r\n          property: `og:description`,\r\n          content: metaDescription,\r\n        },\r\n        {\r\n          property: `og:type`,\r\n          content: `website`,\r\n        },\r\n        {\r\n          name: `twitter:card`,\r\n          content: `summary`,\r\n        },\r\n        {\r\n          name: `twitter:creator`,\r\n          content: site.siteMetadata.author,\r\n        },\r\n        {\r\n          name: `twitter:title`,\r\n          content: title,\r\n        },\r\n        {\r\n          name: `twitter:description`,\r\n          content: metaDescription,\r\n        },\r\n      ].concat(meta)}\r\n    />\r\n  )\r\n}\r\n\r\nSEO.defaultProps = {\r\n  lang: `en`,\r\n  meta: [],\r\n  description: ``,\r\n}\r\n\r\nSEO.propTypes = {\r\n  description: PropTypes.string,\r\n  lang: PropTypes.string,\r\n  meta: PropTypes.arrayOf(PropTypes.object),\r\n  title: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default SEO\r\n"],"sourceRoot":""}